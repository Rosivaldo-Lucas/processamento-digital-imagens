#include <iostream>
#include <cmath>
#include <vector>
#include <opencv2/opencv.hpp>

#include "../includes/Correlation.hpp"
#include "../includes/NegativeImage.hpp"
#include "../includes/ConversionImage.hpp"

std::vector<std::vector<double>> filterBox15x15 = {
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0},
  {1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0, 1.0/225.0}
};

int main() {
  cv::Mat image = cv::imread("/home/rosivaldo/Documents/rosivaldo/engcomp/2023-1/pdi/projeto/images/testpat.1k.color2.tif", cv::IMREAD_COLOR);

  if (!image.data) {
    std::cout << "Não foi possível abrir a imagem." << std::endl;

    exit(0);
  }
  
  // Correlation *correlation = new Correlation();
  // NegativeImage *negativeImage = new NegativeImage();

  ConversionImage *conversionImage = new ConversionImage();

  // cv::Mat newImage = correlation->execute(&image, &filterBox15x15);
  // cv::Mat newImage = negativeImage->execute(&image);
  
  HSB **hsbResult = conversionImage->converterRgbToHsb(&image);

  HSB **hsb = conversionImage->alterHue(hsbResult, image.rows, image.cols, 120);
        
  cv::Mat newImage = conversionImage->converterHsbToRgb(hsb, image.rows, image.cols);

  cv::namedWindow("janela", cv::WINDOW_NORMAL);
  cv::resizeWindow("janela", 800, 800);

  cv::imshow("janela", newImage);

  cv::waitKey();

  return 0;
}
